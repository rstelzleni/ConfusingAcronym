#usda 1.0
(
    defaultPrim = "Model"
)

def Xform "Model" (
    apiSchemas = ["MaterialBindingAPI"]
    kind = "component"
    variants = {
        string shape = "box"
        string color = "blue"
    }
    prepend variantSets = ["shape", "color"]
)
{
    rel material:binding = </Model/Color>

    def Mesh "Geo"
    {
        int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
        int[] faceVertexIndices = [0, 1, 3, 2, 0, 4, 5, 1, 1, 5, 6, 3, 2, 3, 6, 7, 0, 2, 7, 4, 4, 7, 6, 5]
        point3f[] points = [(-1, -1, -1), (1, -1, -1), (-1, -1, 1), (1, -1, 1), (-1, 1, -1), (1, 1, -1), (1, 1, 1), (-1, 1, 1)]
    }

    def Material "Color"
    {
        token outputs:surface.connect = </Model/Color/ColorShader.outputs:surface>

        def Shader "ColorShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            float inputs:roughness = 1
            token outputs:surface
        }
    }

    variantSet "shape" = {
        "box" {
            over "Geo" {
                token subdivisionScheme = "none"
            }
        }
        "sphere" {
            over "Geo" {
                token subdivisionScheme = "catmullClark"
            }
        }
    }

    variantSet "color" = {
        "red" {
            over "Color" {
                over "ColorShader" {
                    color3f inputs:diffuseColor = (1.0, 0.2, 0.2)
                }
            }
        }
        "blue" {
            over "Color" {
                over "ColorShader" {
                    color3f inputs:diffuseColor = (0.2, 0.2, 1.0)
                }
            }
        }
        "green" {
            over "Color" {
                over "ColorShader" {
                    color3f inputs:diffuseColor = (0.2, 1.0, 0.2)
                }
            }
        }
    }
}
