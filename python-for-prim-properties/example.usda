#usda 1.0
(
    "An example file with attributes and relationships to query"
    defaultPrim = "Example"
    endTimeCode = 60
    startTimeCode = 1
    timeCodesPerSecond = 30
    upAxis = "Z"
)

def Xform "Example" (
    kind = "component"
)
{
    def Xform "Left"
    {
        float3 xformOp:rotateXYZ.timeSamples = {
            1: (0, 0, 0),
            2: (0, 17.996582, 0),
            3: (0, 35.38317, 0),
            4: (0, 52.17028, 0),
            5: (0, 68.36843, 0),
            6: (0, 83.98814, 0),
            7: (0, 99.039925, 0),
            8: (0, 113.534294, 0),
            9: (0, 127.48178, 0),
            10: (0, 140.89288, 0),
            11: (0, 153.77814, 0),
            12: (0, 166.14804, 0),
            13: (0, 178.01314, 0),
            14: (0, 189.38393, 0),
            15: (0, 200.27092, 0),
            16: (0, 210.68463, 0),
            17: (0, 220.6356, 0),
            18: (0, 230.13434, 0),
            19: (0, 239.19135, 0),
            20: (0, 247.81715, 0),
            21: (0, 256.02228, 0),
            22: (0, 263.81723, 0),
            23: (0, 271.21252, 0),
            24: (0, 278.21872, 0),
            25: (0, 284.84625, 0),
            26: (0, 291.1057, 0),
            27: (0, 297.00757, 0),
            28: (0, 302.56238, 0),
            29: (0, 307.78064, 0),
            30: (0, 312.67285, 0),
            31: (0, 317.24957, 0),
            32: (0, 321.52127, 0),
            33: (0, 325.4985, 0),
            34: (0, 329.19177, 0),
            35: (0, 332.6116, 0),
            36: (0, 335.7685, 0),
            37: (0, 338.673, 0),
            38: (0, 341.33557, 0),
            39: (0, 343.76678, 0),
            40: (0, 345.97714, 0),
            41: (0, 347.97714, 0),
            42: (0, 349.77734, 0),
            43: (0, 351.3882, 0),
            44: (0, 352.8203, 0),
            45: (0, 354.0841, 0),
            46: (0, 355.19016, 0),
            47: (0, 356.149, 0),
            48: (0, 356.97107, 0),
            49: (0, 357.66696, 0),
            50: (0, 358.24713, 0),
            51: (0, 358.72217, 0),
            52: (0, 359.10254, 0),
            53: (0, 359.39877, 0),
            54: (0, 359.62137, 0),
            55: (0, 359.78088, 0),
            56: (0, 359.88782, 0),
            57: (0, 359.95267, 0),
            58: (0, 359.98596, 0),
            59: (0, 359.99826, 0),
            60: (0, 360, 0),
        }
        double3 xformOp:translate = (-1.5, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ"]

        def Mesh "Mesh" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            int[] faceVertexCounts = [4]
            int[] faceVertexIndices = [0, 1, 2, 3]
            rel material:binding = </Example/Material>
            point3f[] points = [(-1, 0, -1), (1, 0, -1), (1, 0, 1), (-1, 0, 1)]
            texCoord2f[] primvars:uv = [(0, 0), (1, 0), (1, 1), (0, 1)] (
                interpolation = "varying"
            )
        }
    }

    def Xform "Right"
    {
        float3 xformOp:rotateXYZ.timeSamples = {
            1: (0, 0, 0),
            2: (0, -35.993164, 0),
            3: (0, -70.76634, 0),
            4: (0, -104.34056, 0),
            5: (0, -136.73686, 0),
            6: (0, -167.97627, 0),
            7: (0, -198.07985, 0),
            8: (0, -227.06859, 0),
            9: (0, -254.96356, 0),
            10: (0, -281.78577, 0),
            11: (0, -307.55627, 0),
            12: (0, -332.29608, 0),
            13: (0, -356.02628, 0),
            14: (0, -378.76785, 0),
            15: (0, -400.54184, 0),
            16: (0, -421.36926, 0),
            17: (0, -441.2712, 0),
            18: (0, -460.26868, 0),
            19: (0, -478.3827, 0),
            20: (0, -495.6343, 0),
            21: (0, -512.04456, 0),
            22: (0, -527.63446, 0),
            23: (0, -542.42505, 0),
            24: (0, -556.43744, 0),
            25: (0, -569.6925, 0),
            26: (0, -582.2114, 0),
            27: (0, -594.01514, 0),
            28: (0, -605.12476, 0),
            29: (0, -615.5613, 0),
            30: (0, -625.3457, 0),
            31: (0, -634.49915, 0),
            32: (0, -643.04254, 0),
            33: (0, -650.997, 0),
            34: (0, -658.38354, 0),
            35: (0, -665.2232, 0),
            36: (0, -671.537, 0),
            37: (0, -677.346, 0),
            38: (0, -682.67114, 0),
            39: (0, -687.53357, 0),
            40: (0, -691.9543, 0),
            41: (0, -695.9543, 0),
            42: (0, -699.5547, 0),
            43: (0, -702.7764, 0),
            44: (0, -705.6406, 0),
            45: (0, -708.1682, 0),
            46: (0, -710.3803, 0),
            47: (0, -712.298, 0),
            48: (0, -713.94214, 0),
            49: (0, -715.3339, 0),
            50: (0, -716.49426, 0),
            51: (0, -717.44434, 0),
            52: (0, -718.2051, 0),
            53: (0, -718.79755, 0),
            54: (0, -719.24274, 0),
            55: (0, -719.56177, 0),
            56: (0, -719.77563, 0),
            57: (0, -719.90533, 0),
            58: (0, -719.9719, 0),
            59: (0, -719.9965, 0),
            60: (0, -720, 0),
        }
        double3 xformOp:translate = (1.5, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ"]

        def Mesh "Mesh" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            int[] faceVertexCounts = [4]
            int[] faceVertexIndices = [0, 1, 2, 3]
            rel material:binding = </Example/Material>
            point3f[] points = [(-1, 0, -1), (1, 0, -1), (1, 0, 1), (-1, 0, 1)]
            texCoord2f[] primvars:uv = [(0, 0), (1, 0), (1, 1), (0, 1)] (
                interpolation = "varying"
            )
        }
    }

    def Material "Material"
    {
        token outputs:surface.connect = </Example/Material/SurfaceShader.outputs:surface>

        def Shader "SurfaceShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor.connect = </Example/Material/Texture.outputs:rgb>
            float inputs:metallic = 0
            float inputs:opacity.connect = </Example/Material/Texture.outputs:a>
            float inputs:roughness = 0.7
            token outputs:surface
        }

        def Shader "UVReader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            token inputs:varname = "uv"
            float2 outputs:result
        }

        def Shader "Texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @confusing-logo.png@
            float2 inputs:st.connect = </Example/Material/UVReader.outputs:result>
            float outputs:a
            float3 outputs:rgb
        }
    }
}

def Camera "Camera"
{
    float4[] clippingPlanes = []
    float2 clippingRange = (1, 1000000)
    float focalLength = 50
    float focusDistance = 0
    float fStop = 0
    float horizontalAperture = 20.955
    float horizontalApertureOffset = 0
    token projection = "perspective"
    float verticalAperture = 15.2908
    float verticalApertureOffset = 0
    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 2.220446049250313e-16, 1, 0), (0, -1, 2.220446049250313e-16, 0), (0, -12.849355065402989, 0, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]
}

